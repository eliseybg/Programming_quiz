<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_name">Programming quiz</string>
    <string name="detect_language">Detect language</string>
    <string name="IT_communication">IT communication</string>
    <string name="settings">Settings</string>
    <string name="about_us">About us</string>
    <string name="general_settings">General settings</string>
    <string name="notification_settings">Notifications</string>
    <string name="sound">Sound</string>
    <string name="all_questions">All questions</string>
    <string name="time_for_answer">Time for answer</string>
    <string name="c_vehicle">was the great all-arounder: compact, powerful, goes everywhere, and reliable in situations where your life depends on it.</string>
    <string name="c_pus_plus_vehicle">is the new C — twice the power, twice the size, works in hostile environments, and if you try to use it without care and special training you will probably crash.</string>
    <string name="c_sharp_vehicle">is C++ with more safety features so that ordinary civilians can use it. It looks kind of silly but it has most of the same power so long as you stay near gas pumps and auto shops and the comforts of civilization. A well-known heavily muscular intimidator keeps touting it.</string>
    <string name="java_vehicle">is another attempt to improve on C. It sort of gets the job done, but it\'s way slower, bulkier, spews pollution everywhere, and people will think you\'re a redneck.</string>
    <string name="python_vehicle">is great for everyday tasks: easy to drive, versatile, comes with all the conveniences built in. It isn\'t fast or sexy, but neither are your errands.</string>
    <string name="perl_vehicle">used to serve the same purpose as Python, but now only bearded ex-hippies use it.</string>
    <string name="lisp_vehicle">" is programming stripped down to the bare essence. It's been around since forever. Using it makes you stronger, but only an athlete or a maniac can make a living with with it."</string>
    <string name="haskell_vehicle">is like a hipster version of LISP.</string>
    <string name="php_vehicle">is this hand-me-down deathtrap that you only use because you\'re stuck with it, and when you hit a speed bump the wrong way it sets you and your passengers on fire.</string>
    <string name="go_vehicle">is a shiny new toy that tech nerds say will be the way of the future, but it\'s only practical if you limit everything you want to do to stay within its range.</string>
    <string name="cobol_vehicle">probably seemed like a good idea at the time.</string>
    <string name="matlab_vehicle">is what scientists use to do special scientist things.</string>
    <string name="r_vehicle">is what scientists use when they can\'t afford MATLAB.</string>
    <string name="assembler_vehicle">just an engine; You have to build the car yourself and manually supply fuel while driving, but with a certain skill you can drive at a truly hellish speed.</string>
    <string name="javascript_vehicle">if you put big wheels and a racing stripe on a golf cart, it\'s still a fucking golf cart.</string>
    <string name="c_weapon">is an M1 Garand standard issue rifle, old but reliable.</string>
    <string name="c_plus_plus_weapon">is a set of nunchuks, powerful and impressive when wielded but takes many years of pain to master and often you probably wish you were using something else.</string>
    <string name="perl_weapon">is a molotov cocktail, it was probably useful once, but few people use it now.</string>
    <string name="java_weapon">is a belt fed 240G automatic weapon where sometimes the belt has rounds, sometimes it doesn’t, and when it doesn’t during firing you get an NullPointerException, the gun explodes and you die.</string>
    <string name="scala_weapon">is a variant of the 240G Java, except the training manual is written in an incomprehensible dialect which many suspect is just gibberish.</string>
    <string name="javascript_weapon">is a sword without a hilt.</string>
    <string name="go_weapon">is the custom made “if err != nil” starter pistol and after each shot you must check to make sure it actually shot. Also it shoots tabs instead of blanks.</string>
    <string name="rust_weapon">is a 3d printed gun. It may work some day.</string>
    <string name="bash_weapon">is a cursed hammer, when wielded everything looks like a nail, especially your thumb.</string>
    <string name="python_weapon">is the “v2/v3” double barrel shotgun, only one barrel will shoot at a time, and you never end up shooting the recommended one. Also I probably should have used a line tool to draw that.</string>
    <string name="ruby_weapon">is a ruby encrusted sword, it is usually only used because of how shiny it is.</string>
    <string name="php_weapon">is a hose, you usually plug one end into a car exhaust, and the other you stick in through a window and then you sit in the car and turn the engine on.</string>
    <string name="c_sharp_weapon">is a powerful laser rifle strapped to a donkey, when taken off the donkey the laser doesn’t seem to work as well.</string>
    <string name="prolog_weapon">is an AI weapon, you tell it what to do, which it does but then it also builds some terminators to go back in time and kill your mom.</string>
    <string name="lisp_weapon">is a shiv which comes in many forms. Anyone who uses this is probably crazy and dangerous.</string>
    <string name="assemblerShootInFoot">You try to shoot yourself in the foot only to discover that you must first invent the gun, the bullet, the trigger, and your foot.</string>
    <string name="fortranShootInFoot">You shoot yourself in each toe, iteratively, until you run out of toes, then you read in the next foot and repeat. If you run out of bullets or toes, you continue anyway because no exception processing was anticipated.</string>
    <string name="lispShootInFoot">You attempt to shoot yourself in the foot, but the gun jams on a stray parenthesis.</string>
    <string name="cobolShootInFoot">Allocate $500,000 for the project. Define foot, bullet, gun. Run press_trigger. Go for coffee break. Return in time to put foot under bullet.</string>
    <string name="basicShootInFoot">Shoot self in foot with water pistol. On big systems, continue until entire lower body is waterlogged.</string>
    <string name="logoShootInFoot">You can easily shoot the gun, but you have to work out the geometry to make sure the bullet goes into your foot.</string>
    <string name="pascalShootInFoot">The gun is mounted such that it cannot point towards your feet, but you can swivel it round and shoot yourself in the head instead.</string>
    <string name="forthShootInFoot">First you decide to leave the number of toes lost on the stack and then implement the word foot-toes@ which takes three numbers from the stack: foot number, range, and projectile mass (in slugs) and changes the current vocabulary to blue. While testing this word you are arrested by the police for mooning (remember, this is a bottom-up language) who demonstrate the far better top-down approach to damaging yourself.</string>
    <string name="cShootInFoot">You shoot yourself in the foot and then nobody else can figure out what you did.</string>
    <string name="smalltalkShootInFoot">You daydream repeatedly about shooting yourself in the foot.</string>
    <string name="prologShootInFoot">You tell your program you wish to be shot in the foot. The program figures out how to do it, but the syntax doesn\'t allow it to explain.</string>
    <string name="SQLShootInFoot">You cut your foot off, send it out to a service bureau, and when it returns it has a hole in it, but it will no longer fit the attachment at the end of your leg.</string>
    <string name="c_plus_plus_ShootInFoot">You accidentally create a dozen instances of yourself and shoot them all in the foot. Providing emergency medical assistance is impossible since you can\'t tell which are bitwise copies and which are just pointing at others and saying, That\'s me, over there.</string>
    <string name="adaShootInFoot">After correctly packaging your foot, you attempt to concurrently load the gun, pull the trigger, scream, and shoot yourself in the foot. When you try, however, you discover that your foot is of the wrong type.</string>
    <string name="matlabShootInFoot">You shoot yourself in the foot five times from the command prompt before you can put your foot in an m file.</string>
    <string name="eiffelShootInFoot">You take out a contract on your foot. The precondition is that there\'s a bullet in the gun; the postcondition is that there\'s a hole in your foot.</string>
    <string name="objective_c_ShootInFoot">You write a protocol for shooting yourself in the foot so that all people can get shot in their feet.</string>
    <string name="perlShootInFoot">You shoot yourself in the foot and then decide it was so much fun that you invent another six completely different ways to do it.</string>
    <string name="haskellShootInFoot">You shoot yourself in the foot very elegantly, and wonder why the whole world isn\'t shooting itself this way.</string>
    <string name="pythonShootInFoot">You shoot yourself in the foot and then brag for hours about how much more elegantly you did it than if you had been using C or (God forbid) Perl.</string>
    <string name="visual_basic_ShootInFoot">You do a Google search on how to shoot yourself in the foot. You find seventeen completely different ways to do it, none of which are properly structured. You paste the first example into the IDE and compile. It brushes your teeth.</string>
    <string name="javaShootInFoot">You amputate your foot at the ankle with a fourteen-pound hacksaw, but you can do it on any platform.</string>
    <string name="javascriptShootInFoot">You find that Microsoft and Sun have released incompatible class libraries both implementing Gun objects. You then find that although there are plenty of Foot objects implemented in the past in many other languages, you cannot get access to one. But, seeing as JavaScript is so cool, you don\'t care and go around shooting anything else you can find.</string>
    <string name="phpShootInFoot">Three thousand people line up on your apartment\'s welcome mat and demand to be shot in their feet. One by one, you oblige them, but halfway through, the http connection times out and the crowd lynches you.</string>
    <string name="rubyShootInFoot">You shoot yourself in the foot and then have to justify it to all your friends who are still naively using Perl.</string>
    <string name="c_sharpShootInFoot">You forget precisely how to use the .NET interface and shoot yourself in the foot. You sue Microsoft for damages.</string>
    <string name="cssShootInFoot">Everyone can now shoot themselves in the foot, but all their feet come out looking identical and attached to their ears.</string>
    <string name="delphiShootInFoot">You try to shoot yourself in the foot but discover that the bullets you already had are not compatible with the new gun version, but Borland promises a fix real soon now.</string>
    <string name="htmlShootInFoot">You cut a bullethole in your foot with nothing more than a small penknife, but you realize that to make it look convincing, you need to be using Dreamweaver.</string>
    <string name="xmlShootInFoot">You can\'t actually shoot yourself in the foot; all you can do is describe the gun in painful detail.</string>
    <string name="find_match">Find match</string>
    <string name="shooting_in_foot">Shooting in foot</string>
    <string name="correct_answers">"Correct answers: "</string>
    <string name="notification_ticker">Enjoy programming</string>
    <string name="notification_1">Can you detect the language?</string>
    <string name="notification_2">Check your knowledge of languages.</string>
    <string name="notification_3">Find a match with the language.</string>
    <string name="notification_4">Which language shoots better in the leg?</string>
</resources>